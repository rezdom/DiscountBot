from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import StateFilter

from src.bot.utils.states import MagnitStates, GeneralState, user_products
from src.database.utils.enum_models import MarketGroups, ProductTypes
from src.bot.keyboards import general_keyboards as gk
from src.scraping.magnit import get_stores, get_data
from src.bot.utils.big_info import INPUT_ADDRESS
from src.scraping.geo import get_address_info
from src.database.orm import AsyncProductOrm, AsyncSklepOrm
from src.database.db_models import Product

router = Router()

def format_page(products: list[Product], offset: int, per_page = 5):
    visible_products = products[offset:offset+per_page]

    if not visible_products:
        return ("–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", gk.get_next_or_back(offset, len(products), per_page))
    
    message_text = "\n".join(
        f"{'='*15}\n{product.name}\n–°–∫–∏–¥–∫–∞: -{product.discount}%\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: <s>{product.price / 100:.2f}</s>\n –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{((product.price / 100)*(1-product.discount/100)):.2f}</b>" for product in visible_products
    )
    return message_text, gk.get_next_or_back(offset, len(products), per_page)


@router.message(F.text=='üî¥–ú–ê–ì–ù–ò–¢', StateFilter(GeneralState.start))
async def get_address(message: Message, state: FSMContext):
    await state.set_state(MagnitStates.waiting_input_address)
    await state.update_data(store_type=MarketGroups.MAGNIT)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
                   reply_markup=gk.get_location)

@router.message(F.location, StateFilter(MagnitStates.waiting_input_address))
async def get_stores_location(message: Message, state: FSMContext):
    location = message.location
    stores = await get_stores(lat=location.latitude, long=location.longitude)
    if stores:
        await state.set_state(MagnitStates.select_store)
        await state.update_data(stores=stores)
        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–±–µ –º–∞–≥–∞–∑–∏–Ω:",
                            reply_markup=gk.get_select_store(*stores))
    else:
        await state.set_data(default_state)
        await state.set_data(GeneralState.start)
        await message.answer(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–µ –º–∞–≥–Ω–∏—Ç–∞ (–ü—Ä–æ–±–ª–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤).\n"\
                             "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!\n"\
                                "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=gk.main_menu_client)

@router.message(F.text=="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é", StateFilter(MagnitStates.waiting_input_address))
async def input_address(message: Message, state: FSMContext):
    await state.set_state(MagnitStates.input_address)
    await message.answer(INPUT_ADDRESS, parse_mode="HTML")

@router.message(F.text=="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", StateFilter(MagnitStates.waiting_input_address))
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.set_state(default_state)
    await state.set_state(GeneralState.start)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:",
                         reply_markup=gk.main_menu_client)

@router.message(F.text, StateFilter(MagnitStates.input_address))
async def get_stores_address(message: Message, state: FSMContext):
    location = await get_address_info(message.text)
    if location:
        stores = await get_stores(lat=location.latitude, long=location.longitude)
        if stores:
            await state.set_state(MagnitStates.select_store)
            await state.update_data(stores=stores)
            await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–±–µ –º–∞–≥–∞–∑–∏–Ω:",
                                reply_markup=gk.get_select_store(*stores))
        else:
            await state.set_data(default_state)
            await state.set_data(GeneralState.start)
            await message.answer(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–µ –º–∞–≥–Ω–∏—Ç–∞ (–ü—Ä–æ–±–ª–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤).\n"\
                                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!\n"\
                                    "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=gk.main_menu_client)
    else:
        await message.answer(f"–í–∏–¥–∏–º–æ —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")


@router.callback_query(StateFilter(MagnitStates.select_store), F.data.startswith("store"))
async def get_store(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ò–¥–µ—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–π—Ç–µ...")
    data = await state.get_data()
    store = data.get("stores")[int(callback.data[-1])]
    await state.set_state(MagnitStates.input_discount)
    await state.update_data(select_store=store)
    sklep = await AsyncSklepOrm.get_sklep(store[0])
    if not sklep or (await AsyncSklepOrm.get_update_sklep(store[1])):
        if (await AsyncSklepOrm.get_update_sklep(store[1])):
            await AsyncSklepOrm.del_sklep(store[1])
        sklep = await AsyncSklepOrm.add_sklep(data.get("store_type"), store[1], store[0])
        await get_data(sklep.id, sklep.shop_id)
    await state.update_data(sklep_id=sklep.id)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {store[0]}\n"\
                                "–í–≤–µ–¥–∏ —Å–∫–∏–¥–∫—É –æ—Ç 0% –¥–æ 100%(–ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)\n" \
                                "–ë—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–≤–∞—Ä—ã –æ—Ç n% –¥–æ 100%")

@router.message(StateFilter(MagnitStates.input_discount), F.text)
async def get_discount(message: Message, state: FSMContext):
    try:
        discount = int(message.text)
        if not (0 <= discount <= 100):
            raise ValueError  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–æ–≤–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        # –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
        await state.update_data(discount=discount)
        await state.set_state(MagnitStates.select_type)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=gk.product_types)
    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–æ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ **—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100**.\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä: `25` –¥–ª—è 25% —Å–∫–∏–¥–∫–∏.\n"
                             "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")

@router.callback_query(F.data.in_([str(item.value) for item in ProductTypes]), StateFilter(MagnitStates.select_type))
async def load_product_list(callback: CallbackQuery, state:FSMContext):
    product_type = ProductTypes(int(callback.data))
    await state.update_data(product_type=product_type)
    await state.set_state(MagnitStates.pages_list)
    data = await state.get_data()
    user_products[callback.message.from_user.id] = await AsyncProductOrm.get_products(data.get("sklep_id"), data.get("product_type"), data.get("discount"))

    offset = 0
    message_text, reply_markup = format_page(user_products[callback.message.from_user.id], offset)

    await state.update_data(offset=offset)
    await callback.message.edit_text(message_text, parse_mode="HTML", reply_markup=reply_markup)

@router.callback_query(F.data.in_(["back"]), StateFilter(MagnitStates.select_type))
async def get_product_list(callback: CallbackQuery, state:FSMContext):
    await state.set_state(default_state)
    user_products.pop(callback.message.from_user.id, None)
    await state.set_state(GeneralState.start)
    await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:",
                         reply_markup=gk.main_menu_client)

@router.callback_query(F.data.in_(["next", "back"]), StateFilter(MagnitStates.pages_list))
async def paginate_products(callback: CallbackQuery, state: FSMContext):
    user_id = callback.message.from_user.id
    data = await state.get_data()

    offset = data.get("offset")
    if callback.data == "next":
        offset += 5
    elif callback.data == "back":
        offset = max(0, offset - 5)
    products = user_products.get(user_id, [])
    message_text, reply_markup = format_page(products, offset)

    await state.update_data(offset=offset)

    await callback.message.edit_text(message_text, parse_mode="HTML", reply_markup=reply_markup)

@router.callback_query(F.data.in_(["menu"]), StateFilter(MagnitStates.pages_list))
async def to_select_type(callback: CallbackQuery, state: FSMContext):
    user_products.pop(callback.message.from_user.id, None)
    await state.set_state(MagnitStates.select_type)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=gk.product_types)