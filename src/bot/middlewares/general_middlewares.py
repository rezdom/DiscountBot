from datetime import datetime, timedelta
from aiogram import BaseMiddleware
from aiogram.types import Message, TelegramObject, CallbackQuery
from collections import defaultdict
from typing import Dict, Any, Callable, Awaitable

from src.database.orm import AsyncUserOrm

class AntiFloodMiddleware(BaseMiddleware):
    def __init__(self, cooldown_seconds: int = 1, max_calls: int = 3):
        self.cooldown = cooldown_seconds
        self.max_calls = max_calls
        self.user_calls = defaultdict(list)

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        if not isinstance(event, Message):
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)

        user_id = event.from_user.id
        now = datetime.now()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã (> cooldown)
        self.user_calls[user_id] = [
            t for t in self.user_calls[user_id]
            if now - t < timedelta(seconds=self.cooldown)
        ]

        if len(self.user_calls[user_id]) >= self.max_calls:
            await event.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return 

        self.user_calls[user_id].append(now)
        return await handler(event, data)

class BanCheckMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        if not isinstance(event, (Message, CallbackQuery)):
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ callback, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)


        user_id = event.from_user.id
        user = await AsyncUserOrm.get_user(user_id)

        if user and user.is_banned:
            if isinstance(event, CallbackQuery):
                await event.answer(
                    "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–ó–∞ —Ä–∞–∑–±–∞–Ω–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <b>@rezdom</b>",
                    show_alert=True,
                    parse_mode="HTML"
                )
            elif isinstance(event, Message):
                await event.answer(
                    "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–ó–∞ —Ä–∞–∑–±–∞–Ω–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <b>@rezdom</b>",
                    parse_mode="HTML"
                )
            return

        
        return await handler(event, data)
